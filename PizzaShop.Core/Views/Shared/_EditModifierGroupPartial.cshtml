@model PizzaShop.Repository.ModelView.MenuWithItemsViewModel

<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true"
    data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="editModalLabel">Edit Modifier Group</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="editModifierGroupForm">
                    <form method="post" asp-action="EditModifierGroup" asp-controller="Menu">
                        <input type="hidden" asp-for="Userid" value="@ViewBag.UserId" />
                        <input type="hidden" asp-for="Modifiergroupid" id="modifierGroupId" />
                        <input type="hidden" id="selectedIds2" name="selectedIds1" value="" />
                        <div class="form-floating mb-3">
                            <input asp-for="Modifiergroupname" type="text" class="form-control" id="floatingInput"
                                placeholder="name">
                            <label for="floatingInput">Name</label>
                            <span class="text-danger" asp-validation-for="Modifiergroupname"></span>
                        </div>
                        <div class="form-floating mb-3">
                            <textarea class="form-control" asp-for="Modifiergroupdescription"
                                placeholder="Leave a comment here" id="floatingTextarea2"
                                style="height: 100px"></textarea>
                            <label for="floatingTextarea2">Description</label>
                            <span class="text-danger" asp-validation-for="Modifiergroupdescription"></span>
                        </div>
                        <div class="float-end">
                            <button type="submit" class="btn btn-primary">Save</button>
                            <button type="button" class="btn border-primary text-primary"
                                data-bs-dismiss="modal">Cancel</button>
                        </div>
                    </form>

                    <div class="py-4">
                        <a class="text-decoration-none link-to-modifiers text-primary" href="#">+ Edit modifiers</a>
                    </div>
                    <div class="py-4" id="selectedModifiersContainer2">
                        <div class="d-flex flex-wrap">
                            @if (Model.selectedModifiersViewModels != null)
                            {
                                @foreach (var v in Model.selectedModifiersViewModels)
                                {
                                    <div class="border border-2 px-2 text-primary rounded-pill border-primary me-2 mb-2"
                                        data-id="@v.ModifierId">
                                        @v.ModifierName <span class="text-dark remove-modifier" style="cursor: pointer;"
                                            data-id="@v.ModifierId">x</span>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>

                <div class="addexistingModifiers" style="display: none;">
                    <div class="float-end w-50 position-relative bg-white mx-2 border border-1 rounded">
                        <input type="text" id="searchInput2" placeholder="Search" class="search_bar">
                        <img src="~/images/search-icon.svg" width="20px" class="search_bar_img">
                    </div>
                    <form method="post" asp-action="EditModifierGroupDetails" asp-controller="Menu" id="modifierForm">
                        <div id="collapse4" class="tabularData">
                            <!-- Partial view content will be loaded here -->
                        </div>
                        <input type="hidden" id="selectedIds3" name="selectedIds1" value="" />

                        <nav aria-label="Page navigation example">
                            <ul class="m-2 pagination justify-content-end align-items-center d-lg-flex d-sm-flex gap-2">
                                <div class="d-flex align-items-center mb-2 mt-2">
                                    <span>Items per page: </span>
                                    <div class="custom-dropdown">
                                        <button class="btn border" type="button" id="itemsPerPageBtnEdit">
                                            5 <span><i class="bi bi-arrow-down-short"></i></span>
                                        </button>
                                        <div class="custom-dropdown-menu" id="itemsPerPageMenuEdit"
                                            style="display: none;">
                                            <div class="page-size-option" data-size="5">5</div>
                                            <div class="page-size-option" data-size="10">10</div>
                                            <div class="page-size-option" data-size="15">15</div>
                                        </div>
                                    </div>
                                </div>
                                <div class="d-flex align-items-center mb-2 mt-2">
                                    <span id="pagination-info-edit">Showing 1-5 of 5</span>
                                    <li class="page-item"><a class="page-link prev-page mx-2" href="#"
                                            id="prevPageEdit">
                                            < </a>
                                    </li>
                                    <li class="page-item"><a class="page-link next-page" href="#"
                                            id="nextPageEdit">></a></li>
                                </div>
                            </ul>
                        </nav>
                        <div class="float-end">
                            <button type="submit" class="btn btn-primary" id="addButton">Update</button>
                            <a class="btn border-primary text-primary close-modifiers" href="#">Cancel</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
    $(document).ready(function () {
        toastr.options.closeButton = true;
        var rowsPerPageEdit = 5;
        var currentPageEdit = 1;
        var totalItemsEdit = @Model.TotalItems1 || 0;
        var existingModifierIdsEdit = [];
        var pendingModifierIdsEdit = [];
        var searchTermEdit = '';
        var currentModifierGroupid = null;

        // Toggle custom dropdown visibility
        $('#itemsPerPageBtnEdit').on('click', function () {
            var $menu = $('#itemsPerPageMenuEdit');
            $menu.toggle();
        });

        // Close dropdown when clicking outside
        $(document).on('click', function (e) {
            var $dropdown = $('.custom-dropdown');
            if (!$dropdown.is(e.target) && $dropdown.has(e.target).length === 0) {
                $('#itemsPerPageMenuEdit').hide();
            }
        });

        // Handle page size selection
        $('#editModal').on('click', '.page-size-option', function (e) {
            e.preventDefault();
            var newSize = parseInt($(this).data('size'));
            if (newSize !== rowsPerPageEdit) {
                rowsPerPageEdit = newSize;
                $('#itemsPerPageBtnEdit').html(`${rowsPerPageEdit} <span><i class="bi bi-arrow-down-short"></i></span>`);
                currentPageEdit = 1;
                fetchModifiersEdit(currentModifierGroupid, searchTermEdit, currentPageEdit, rowsPerPageEdit);
            }
            $('#itemsPerPageMenuEdit').hide();
        });

        // Update UI with existing modifiers
        function updateSelectedModifiersUIEdit() {
            const $container = $('#selectedModifiersContainer2 .d-flex');
            $container.empty();
            existingModifiersEdit.forEach(function (modifier) {
                $container.append(
                    `<div class="border border-2 px-2 text-primary rounded-pill border-primary me-2 mb-2" data-id="${modifier.id}">
                    ${modifier.name} <span class="text-dark remove-modifier" style="cursor: pointer;" data-id="${modifier.id}">x</span>
                </div>`
                );
            });
            $('#selectedIds2').val(existingModifiersEdit.map(m => m.id).join(','));
            $('#selectedIds3').val(existingModifiersEdit.map(m => m.id).join(','));
        }

        // Load modifier group data
        function loadModifierGroupEdit(modifierGroupId) {
            $.ajax({
                url: '/Menu/GetModifierGroup',
                type: 'GET',
                data: { id: modifierGroupId },
                success: function (data) {
                    $('#editModal #floatingInput').val(data.modifiergroupname);
                    $('#editModal #floatingTextarea2').val(data.modifiergroupdescription);
                    $('#editModal #modifierGroupId').val(data.modifiergroupid);
                    existingModifiersEdit = data.selectedModifiers ?
                        data.selectedModifiers.map(m => ({ id: m.modifierId.toString(), name: m.modifierName })) : [];
                    pendingModifierIdsEdit = [];
                    currentModifierGroupid = null;
                    updateSelectedModifiersUIEdit();
                    $('#editModal').modal('show');
                    fetchModifiersEdit(modifierGroupId, searchTermEdit, currentPageEdit, rowsPerPageEdit);
                },
                error: function () {
                    alert('Error loading modifier group data.');
                }
            });
        }

        // Fetch modifiers for the edit modal
        function fetchModifiersEdit(modifierGroupId = null, searchTerm = '', page, pageSize) {
            $.ajax({
                url: '/Menu/FilterModifiersAtEditModifierGroup',
                type: 'GET',
                data: { modifierGroupId: modifierGroupId, searchTerm: searchTerm, pageNumber: page, pageSize: pageSize },
                success: function (data) {
                    $('#collapse4').html(data);
                    totalItemsEdit = parseInt($('#ModifiersContainer4').attr('data-total-modifiers')) || 0;
                    updatePaginationEdit();
                    restoreCheckboxSelectionsEdit();
                },
                error: function () {
                    alert('Error loading modifiers.');
                }
            });
        }

        // Update pagination
        function updatePaginationEdit() {
            var totalPagesEdit = Math.ceil(totalItemsEdit / rowsPerPageEdit);
            var startItemEdit = (currentPageEdit - 1) * rowsPerPageEdit + 1;
            var endItemEdit = Math.min(currentPageEdit * rowsPerPageEdit, totalItemsEdit);
            $("#pagination-info-edit").text(`Showing ${startItemEdit}-${endItemEdit} of ${totalItemsEdit}`);
            $("#prevPageEdit").toggleClass("disabled", currentPageEdit === 1);
            $("#nextPageEdit").toggleClass("disabled", currentPageEdit >= totalPagesEdit);
        }

        // Restore checkbox states
        function restoreCheckboxSelectionsEdit() {
            $('#collapse4 .item-checkbox').each(function () {
                var modifierId = $(this).val();
                var isSelected = existingModifiersEdit.some(m => m.id === modifierId) || pendingModifierIdsEdit.includes(modifierId);
                $(this).prop('checked', isSelected);
            });
        }

        // Pagination controls
        $('#editModal').on('click', '#prevPageEdit', function (e) {
            e.preventDefault();
            if (currentPageEdit > 1) {
                currentPageEdit--;
                fetchModifiersEdit(currentModifierGroupid, searchTermEdit, currentPageEdit, rowsPerPageEdit);
            }
        });

        $('#editModal').on('click', '#nextPageEdit', function (e) {
            e.preventDefault();
            if (currentPageEdit * rowsPerPageEdit < totalItemsEdit) {
                currentPageEdit++;
                fetchModifiersEdit(currentModifierGroupid, searchTermEdit, currentPageEdit, rowsPerPageEdit);
            }
        });

        $('#editModal').on('input', '#searchInput2', function () {
            searchTermEdit = $(this).val().trim();
            currentPageEdit = 1;
            fetchModifiersEdit(currentModifierGroupid, searchTermEdit, currentPageEdit, rowsPerPageEdit);
        });

        // Rest of your existing script (unchanged)
        $('#editModal').on('change', '.item-checkbox', function () {
            var modifierId = $(this).val();
            var modifierName = $(this).data('name') || `Modifier ${modifierId}`;
            var isChecked = $(this).is(':checked');
            if (isChecked && !existingModifiersEdit.some(m => m.id === modifierId) && !pendingModifierIdsEdit.includes(modifierId)) {
                pendingModifierIdsEdit.push(modifierId);
            } else if (!isChecked && pendingModifierIdsEdit.includes(modifierId)) {
                pendingModifierIdsEdit = pendingModifierIdsEdit.filter(id => id !== modifierId);
            }
        });

        $('#editModal').on('submit', '#modifierForm', function (e) {
            e.preventDefault();
            pendingModifierIdsEdit.forEach(function (id) {
                if (!existingModifiersEdit.some(m => m.id === id)) {
                    var name = $(`#collapse4 .item-checkbox[value="${id}"]`).data('name') || `Modifier ${id}`;
                    existingModifiersEdit.push({ id: id, name: name });
                }
            });
            pendingModifierIdsEdit = [];
            updateSelectedModifiersUIEdit();
            $('.addexistingModifiers').hide();
        });

        $('#editModal').on('submit', '#editModifierGroupForm form', function (e) {
            $('#selectedIds1').val(existingModifiersEdit.map(m => m.id).join(','));
        });

        $(document).on('click', '.remove-modifier', function () {
            var modifierId = $(this).data('id').toString();
            existingModifiersEdit = existingModifiersEdit.filter(m => m.id !== modifierId);
            pendingModifierIdsEdit = pendingModifierIdsEdit.filter(id => id !== modifierId);
            updateSelectedModifiersUIEdit();
            restoreCheckboxSelectionsEdit();
        });

        $('#editModal').on('click', '.link-to-modifiers', function (e) {
            e.preventDefault();
            $('.addexistingModifiers').toggle();
            fetchModifiersEdit(currentModifierGroupid, searchTermEdit, currentPageEdit, rowsPerPageEdit);
        });

        $('#editModal').on('click', '.close-modifiers', function (e) {
            e.preventDefault();
            $('.addexistingModifiers').hide();
            pendingModifierIdsEdit = [];
            restoreCheckboxSelectionsEdit();
        });

        $(document).on('click', '.edit-modifier-group', function (e) {
            e.preventDefault();
            var modifierGroupId = $(this).data('id');
            loadModifierGroupEdit(modifierGroupId);
        });
    });
</script>