@using static PizzaShop.Repository.Helpers.Enums
@{
    Layout = "~/Views/Shared/_Dashboard.cshtml";
    bool canEdit = ViewBag.permission[6].Canedit;
    bool canDelete = ViewBag.permission[6].Candelete;
}

<div class="pt-4 px-3 d-flex flex-column justify-content-between flex-sm-column flex-md-row flex-wrap">
    <h3 class="text-blue">Orders</h3>
    <div class="d-flex gap-3 justify-content-end flex-column flex-sm-column flex-md-row flex-wrap">
        <div class="position-relative bg-white border border-1 rounded">
            <input type="text" name="" placeholder="Search" class="search_bar" id="search_tax">
            <img src="~/images/search-icon.svg" width="20px" class="search_bar_img">
        </div>
        <div class="datesInput d-flex gap-3 justify-content-end">
            <select class="form-select" aria-label="Order Status" id="orderStatusFilter"
                asp-items="Html.GetEnumSelectList<OrderStatus>()">
                <option value="">All Statuses</option>
            </select>
            <select class="form-select" aria-label="Date Range" id="dateRangeFilter"
                asp-items="Html.GetEnumSelectList<DateRange>()">
                <option value="">All Dates</option>
            </select>
        </div>
        <a class="text-decoration-none bg-blue d-flex justify-content-center align-items-center p-2 rounded text-white"
            id="exportBtn">
            <i class="bi bi-box-arrow-up-right px-1"></i>
            <span class="spinner-border spinner-border-sm text-white d-none" id="exportLoader" role="status"
                aria-hidden="true"></span>
            <span class="spanClass text-white">Export</span>
        </a>
    </div>
</div>

<!-- Rest of your HTML remains the same -->
<div class="pt-4 px-3 d-flex flex-column justify-content-end flex-sm-column flex-md-row flex-wrap">
    <div class="gap-3 d-flex flex-column justify-content-end flex-sm-column flex-md-row flex-lg-row flex-wrap">
        <div class="form-floating mb-3">
            <input type="date" class="form-control" id="FromDateInput" placeholder="DD-MM-YYYY">
            <label for="FromDateInput">From Date</label>
            <span class="text-danger" id="fromDateError"></span>
        </div>
        <div class="form-floating mb-2">
            <input type="date" class="form-control" id="ToDateInput" placeholder="DD-MM-YYYY">
            <label for="ToDateInput">To Date</label>
            <span class="text-danger" id="toDateError"></span>
        </div>
        <div class="d-flex gap-3">
            <button type="button" class="btn btn-primary mb-3" style=" width: 50%;" id="searchBtn">Search</button>
            <button type="button" class="btn border-primary text-primary mb-3 ml-1" style=" width: 50%;"
                id="clearBtn">Clear</button>
        </div>
    </div>
</div>

<div class="mx-3 px-3 bg-white border rounded">
    <div id="OrderContainer"></div>
    <!-- Pagination Controls -->
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-end align-items-center px-2 d-lg-flex d-sm-flex gap-2">
            <div class="d-flex align-items-center mb-1 mt-2">
                <span>Items per page: Â  </span>
                <div class="custom-dropdown">
                    <button class="btn border" type="button" id="itemsPerPageBtn">
                        5 <span><i class="bi bi-chevron-down"></i></span>
                    </button>
                    <div class="custom-dropdown-menu" id="itemsPerPageMenu" style="display: none;">
                        <div class="page-size-option" data-size="5">5</div>
                        <div class="page-size-option" data-size="10">10</div>
                        <div class="page-size-option" data-size="15">15</div>
                    </div>
                </div>
            </div>
            <div class="d-flex align-items-center mb-1 mt-2 gap-2">
                <span id="pagination-info">Showing 1-5 of 0</span>
                <li class="page-item">
                    <a class="page-link" id="prevPage" href="#">
                        < </a>
                </li>
                <li class="page-item">
                    <a class="page-link" id="nextPage" href="#"> > </a>
                </li>
            </div>
        </ul>
    </nav>
</div>

@section scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    @* <script src="~/js/Orders_scripts.js"></script> *@
    <script>
        $(document).ready(function () {
            toastr.options.closeButton = true;
            var rowsPerPage = 5;
            var currentPage = 1;
            var totalItems = 0;
            var searchTerm = "";
            var orderStatus = "";
            var dateRange = "";
            var fromDate = "";
            var toDate = "";


            var orderAscending = false;
            var orderDescending = false;
            var nameAscending = false;
            var nameDescending = false;
            var dateAscending = false;
            var dateDescending = false;
            var amountAscending = false;
            var amountDescending = false;


            // Get current date (today) in YYYY-MM-DD format
            var today = new Date().toISOString().split("T")[0];

            // Set max attribute for ToDateInput and FromDateInput
            $("#ToDateInput").attr("max", today);
            $("#FromDateInput").attr("max", today);

            // Validation function
            function validateDates() {
                var fromDateVal = $("#FromDateInput").val();
                var toDateVal = $("#ToDateInput").val();
                var isValid = true;

                $("#fromDateError").text("");
                $("#toDateError").text("");

                if (fromDateVal && toDateVal) {
                    if (new Date(fromDateVal) > new Date(toDateVal)) {
                        $("#fromDateError").text("Invalid Date");
                        isValid = false;
                    }
                }

                if (toDateVal && new Date(toDateVal) > new Date(today)) {
                    $("#toDateError").text("To Date cannot be greater than today");
                    isValid = false;
                }

                return isValid;
            }

            // Real-time validation on input change
            $("#FromDateInput, #ToDateInput").on("change", function () {
                validateDates();
            });

            // Fetch orders function
            function fetchOrders(page, pageSize) {
                $.ajax({
                    url: "/Order/FilterOrders",
                    type: "GET",
                    data: {
                        searchTerm: searchTerm,
                        pageNumber: page,
                        pageSize: pageSize,
                        status: orderStatus,
                        dateRange: dateRange,
                        fromDate: fromDate,
                        toDate: toDate,
                        orderAscending: orderAscending,
                        orderDescending: orderDescending,
                        dateAscending: dateAscending,
                        dateDescending: dateDescending,
                        nameAscending: nameAscending,
                        nameDescending: nameDescending,
                        amountAscending: amountAscending,
                        amountDescending: amountDescending
                    },
                    success: function (data) {
                        $("#OrderContainer").html(data);
                        totalItems =
                            parseInt($("#TableContainer").attr("data-total-items")) || 0;
                        updatePagination();
                    },
                    error: function () {
                        console.log("Error loading orders.");
                        toastr.error("Error loading orders.", "Error", { timeOut: 3000 });
                    },
                });
            }

            // Update pagination info
            function updatePagination() {
                var totalPages = Math.ceil(totalItems / rowsPerPage);
                var startItem = (currentPage - 1) * rowsPerPage + 1;
                var endItem = Math.min(currentPage * rowsPerPage, totalItems);
                $("#pagination-info").text(
                    `Showing ${startItem}-${endItem} of ${totalItems}`
                );
                $("#prevPage").toggleClass("disabled", currentPage === 1);
                $("#nextPage").toggleClass("disabled", currentPage >= totalPages);
            }

            // Page size change
            $(document).on("click", ".page-size-option", function (e) {
                e.preventDefault();
                var newSize = parseInt($(this).data("size"));
                if (newSize !== rowsPerPage) {
                    rowsPerPage = newSize;
                    $("#itemsPerPageBtn").html(
                        `${rowsPerPage} <span><i class="bi bi-chevron-down"></i></span>`
                    );
                    currentPage = 1;
                    fetchOrders(currentPage, rowsPerPage);
                }
                $("#itemsPerPageMenu").hide();
            });

            // Toggle dropdown menu
            $("#itemsPerPageBtn").on("click", function () {
                $("#itemsPerPageMenu").toggle();
            });

            // Previous page
            $(document).on("click", "#prevPage", function (e) {
                e.preventDefault();
                if (currentPage > 1) {
                    currentPage--;
                    fetchOrders(currentPage, rowsPerPage);
                }
            });

            // Next page
            $(document).on("click", "#nextPage", function (e) {
                e.preventDefault();
                if (currentPage * rowsPerPage < totalItems) {
                    currentPage++;
                    fetchOrders(currentPage, rowsPerPage);
                }
            });

            // Search input
            $(document).on("input", "#search_tax", function () {
                searchTerm = $(this).val().trim();
            });

            // Search button with validation
            $("#searchBtn").on("click", function () {
                fromDate = $("#FromDateInput").val();
                toDate = $("#ToDateInput").val();
                orderStatus = $("#orderStatusFilter").val();
                dateRange = $("#dateRangeFilter").val();

                if (validateDates()) {
                    currentPage = 1;
                    fetchOrders(currentPage, rowsPerPage);
                } else {
                    toastr.error(
                        "Please correct the date errors before searching.",
                        "Error",
                        { timeOut: 3000 }
                    );
                }
            });

            // Clear button
            $("#clearBtn").on("click", function () {
                searchTerm = "";
                orderStatus = "";
                dateRange = "";
                fromDate = "";
                toDate = "";
                $("#search_tax").val("");
                $("#orderStatusFilter").val("");
                $("#dateRangeFilter").val("");
                $("#FromDateInput").val("");
                $("#ToDateInput").val("");
                $("#fromDateError").text("");
                $("#toDateError").text("");
                currentPage = 1;
                fetchOrders(currentPage, rowsPerPage);
            });

            // Export button with loader
            $("#exportBtn").on("click", function (e) {
                e.preventDefault();
                if (validateDates()) {
                    // Show loader, hide icon
                    $("#exportLoader").removeClass("d-none");
                    $("#exportBtn .bi-box-arrow-up-right").addClass("d-none");

                    // Ensure all variables are populated
                    var url =
                        "/Order/ExportOrders?" +
                        $.param({
                            searchTerm: searchTerm,
                            status: orderStatus,
                            dateRange: $("#dateRangeFilter").val(),
                        });

                    var link = document.createElement("a");
                    link.href = url;
                    link.download = "OrdersExport.xlsx";
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);

                    // Hide loader, show icon after a delay
                    setTimeout(function () {
                        $("#exportLoader").addClass("d-none");
                        $("#exportBtn .bi-box-arrow-up-right").removeClass("d-none");
                        toastr.success("Excel file downloaded successfully.", "Success", {
                            timeOut: 3000,
                        });
                    }, 2000); // Adjust delay as needed
                } else {
                    toastr.error(
                        "Please correct the date errors before exporting.",
                        "Error",
                        { timeOut: 3000 }
                    );
                }
            });

            $(document).on("click", "#OrderDetailEye", function (e) {
                e.preventDefault();
                var orderId = $(this).data("order-id");
                console.log("clicked order id : ", orderId);
                window.location.href = "/Order/OrderDetail?orderId=" + orderId;
            });


            $(document).on("click", "#OrderDetailpdf", function (e) {
                e.preventDefault();
                var orderId = $(this).data("order-id");
                console.log("clicked order id : ", orderId);
                window.location.href = "/Order/GenerateInvoice?orderId=" + orderId;
                toastr.info("Excel file downloaded successfully.", "Success", {
                    timeOut: 3000,
                });
            });



            // Sorting by orders
            $(document).on("click", "#orderAscending", function (e) {
                e.preventDefault();
                resetSortingFlags();
                orderAscending = true;
                fetchOrders(currentPage, rowsPerPage);
            });
            $(document).on("click", "#orderDescending", function (e) {
                e.preventDefault();
                resetSortingFlags();
                orderDescending = true;
                fetchOrders(currentPage, rowsPerPage);
            });

            // Date sorting
            $(document).on("click", "#dateAscending", function (e) {
                e.preventDefault();
                resetSortingFlags();
                dateAscending = true;
                fetchOrders(currentPage, rowsPerPage);
            });
            $(document).on("click", "#dateDescending", function (e) {
                e.preventDefault();
                resetSortingFlags();
                dateDescending = true;
                fetchOrders(currentPage, rowsPerPage);
            });

            // Name sorting
            $(document).on("click", "#nameAscending", function (e) {
                e.preventDefault();
                resetSortingFlags();
                nameAscending = true;
                fetchOrders(currentPage, rowsPerPage);
            });
            $(document).on("click", "#nameDescending", function (e) {
                e.preventDefault();
                resetSortingFlags();
                nameDescending = true;
                fetchOrders(currentPage, rowsPerPage);
            });

            // Amount sorting
            $(document).on("click", "#amountAscending", function (e) {
                e.preventDefault();
                resetSortingFlags();
                amountAscending = true;
                fetchOrders(currentPage, rowsPerPage);
            });
            $(document).on("click", "#amountDescending", function (e) {
                e.preventDefault();
                resetSortingFlags();
                amountDescending = true;
                fetchOrders(currentPage, rowsPerPage);
            });

            // Reset all sorting flags
            function resetSortingFlags() {
                orderAscending = false;
                orderDescending = false;
                dateAscending = false;
                dateDescending = false;
                nameAscending = false;
                nameDescending = false;
                amountAscending = false;
                amountDescending = false;
            }



            // Initial fetch
            fetchOrders(currentPage, rowsPerPage);
        });
    </script>
}